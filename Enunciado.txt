 - Indicar que no puedes eliminar un rol vinculado a un usuario
 
 - Marcar que permisos tiene un usuario por ser de un rol
 
 - Al crear un nuevo permiso en un menú, se le asigna directamente el permiso al rol "Administrador"
 
 - Crear rol "visitante" con permiso sobre las opciones públicas. Todos los usuarios obtienen el rol visitante
 
 - Cuando un usuario acceda por login, cargar en session los permisos que tenga. (Permisos por roles, Permisos por usuario, Permisos por visitante)
 
 - Modificar el menú para que solo aparezcan las opciones para las que el usuario tiene permiso
 
 - Añadir que el usuario solo pueda hacer las acciones para las que tenga permiso (crear / mantener usuarios, menus...)


// SQL

CREATE TABLE permisos_roles (
    id INT (11) NOT NULL AUTO_INCREMENT,
    id_rol INT (11) NOT NULL,
    id_permiso INT (11) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fk_permisosRoles_roles FOREIGN KEY (id_rol) REFERENCES roles(id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_permisosRoles_permiso FOREIGN KEY (id_permiso) REFERENCES permisos(id) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE permisos_usuarios (
    id INT (11) NOT NULL AUTO_INCREMENT,
    id_usuario INT (11) UNSIGNED NOT NULL,
    id_permiso INT (11) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fk_permisosUsuarios_usuarios FOREIGN KEY (id_usuario) REFERENCES usuarios(id_Usuario) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_permisosUsuarios_permiso FOREIGN KEY (id_permiso) REFERENCES permisos(id) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = utf8;